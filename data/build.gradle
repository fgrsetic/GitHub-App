apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"
apply plugin: "de.mannodermaus.android-junit5"

def clientPropertiesFile = rootProject.file("keystore.properties")
def clientProperties = new Properties()
clientProperties.load(new FileInputStream(clientPropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "CLIENT_ID", clientProperties["CLIENT_ID"])
        buildConfigField("String", "CLIENT_SECRET", clientProperties["CLIENT_SECRET"])
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude("META-INF/LICENSE*")
    }

    compileOptions {
        setSourceCompatibility(JavaVersion.VERSION_1_8)
        setTargetCompatibility(JavaVersion.VERSION_1_8)
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation project(":domain")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

    // Android KTX
    implementation "androidx.core:core-ktx:$version_core"

    // Coroutines for getting off the UI thread
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines"

    // Retrofit for networking
    api "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    api "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter"

    // OkHttp - efficient HTTP client
    api "com.squareup.okhttp3:okhttp:$version_okhttp"
    api "com.squareup.okhttp3:logging-interceptor:$version_okhttp"

    // Moshi for parsing the JSON format
    api "com.squareup.moshi:moshi:$version_moshi"
    api "com.squareup.moshi:moshi-kotlin:$version_moshi"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$version_paging"

    // Dagger
    implementation "com.google.dagger:dagger:$version_dagger"
    implementation "com.google.dagger:dagger-android:$version_dagger"
    implementation "com.google.dagger:dagger-android-support:$version_dagger"
    kapt "com.google.dagger:dagger-android-processor:$version_dagger"
    kapt "com.google.dagger:dagger-compiler:$version_dagger"

    // Preferences
    implementation "androidx.preference:preference:$version_preferences"

    // Encrypted shared preferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha01'
    
    // Test
    testImplementation "io.mockk:mockk:$version_mockK"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutine_test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$version_junit_api"

    androidTestImplementation "io.mockk:mockk:$version_mockK"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutine_test"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$version_junit_api"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$version_junit_api"


}



